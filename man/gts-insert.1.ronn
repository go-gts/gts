# gts-insert(1) -- insert guest sequence(s) into the input sequence(s)

## SYNOPSIS

gts-insert [--version] [-h | --help] [<args>] <locator> <guest> <host>

## DESCRIPTION

**gts-insert** takes two sequence inputs: a _guest_ sequence input and a _host_
sequence input, and inserts the sequences contained in the _guest_ sequence
input into the sequences contained in the _host_ sequence input. If the _host_
sequence input is omitted, standard input will be read instead. For each
sequence in the _guest_ sequence input, a copy of each of the _host_ sequence
input will be created. Each _guest_ sequence will then be inserted into the
location(s) specified by the `locator` in the _host_ sequence.

A locator consists of a location specifier and a modifier. A location specifier
may be a `modifier`, a `point location`, a `range location`, or a `selector`.
The syntax for a locator is `[specifier][@modifier]`. See gts-locator(7) for a
more in-depth explanation of a locator. Refer to the EXAMPLES for some examples
to get started.

Features that were present at the point of insertion will be split to form
a `join`ed location. Such features can be instead expanded if the `-e` or
`--embed` option is provided. Any features present in the _guest_ sequence
will be transferred to the corresponding locations after being inesrted into
the _host_ sequence.

There is also a similar command in gts(1) designated gts-infix(1). While
**gts-insert** inserts _guest_ sequences into the primary sequence input,
gts-infix(1) inserts the primary sequence input into the _host_ sequences. Use
**gts-insert** when you want to insert another sequence into the sequence that 
ou are working on in a pipeline. Note that all of the _guest_ sequences will be
read into memory when using **gts-insert**, and all of the _host_ sequences
will be read into memory when using gts-infix(1). If memory availability may be
an issue, make sure to use the command that will read in the smaller file.

## OPTIONS

  * `<locator>`:
    A locator string (`[specifier][@modifier]`). See gts-locator(7) for more
    details.

  * `<guest>`:
    Guest sequence file (will be interpreted literally if preceded with @).
    See gts-seqin(7) for a list of currently supported list of sequence
    formats.

  * `<host>`:
    Input sequence file (may be omitted if standard input is provided). See
    gts-seqin(7) for a list of currently supported list of sequence formats.

  * `-e`, `--embed`:
    Extend existing feature locations when inserting instead of splitting them.

  * `-F <format>`, `--format=<format>`:
    Output file format (defaults to same as input). See gts-seqout(7) for a
    list of currently supported list of sequence formats. The format specified
    with this option will override the file type detection from the output
    filename.

  * `--no-cache`:
    Do not use or create cache. See gts-cache(7) for details.

  * `-o <output>`, `--output=<output>`:
    Output sequence file (specifying `-` will force standard output). The
    output file format will be automatically detected from the filename if none
    is specified with the `-F` or `--format` option.

## EXMAMPLES

Insert a sequence at position 100:

    $ gts insert 100 <guest> <host>

Insert a sequence 20 bases upstream of each CDS:

    $ gts insert CDS@^-20 <guest> <host>

## BUGS

**gts-insert** currently has no known bugs.

## AUTHORS

**gts-insert** is written and maintained by Kotone Itaya.

## SEE ALSO

gts(1), gts-infix(1), gts-delete(1), gts-locator(7), gts-modifier(7),
gts-selector(7), gts-seqin(7), gts-seqout(7)